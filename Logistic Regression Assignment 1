{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-06T04:35:44.171073Z","iopub.execute_input":"2024-09-06T04:35:44.171528Z","iopub.status.idle":"2024-09-06T04:35:44.676298Z","shell.execute_reply.started":"2024-09-06T04:35:44.171481Z","shell.execute_reply":"2024-09-06T04:35:44.674877Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"data_set = pd.read_csv('/kaggle/input/powerlifting/powerlifting_dataset.csv')\ndata_set.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-09-06T04:41:37.827328Z","iopub.execute_input":"2024-09-06T04:41:37.827831Z","iopub.status.idle":"2024-09-06T04:41:37.886730Z","shell.execute_reply.started":"2024-09-06T04:41:37.827778Z","shell.execute_reply":"2024-09-06T04:41:37.885169Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"       Lifter Name  Age Weight Class    Lift Type  Amount Lifted (kg)\n0   Jessica Wilson   46        59 kg  Bench Press                 269\n1         John Doe   60        83 kg  Bench Press                 179\n2      Emily Davis   41       105 kg  Bench Press                 235\n3      Emily Davis   33        66 kg        Squat                 359\n4     Laura Taylor   56        74 kg     Deadlift                 221\n5     Sarah Thomas   56        74 kg        Squat                 264\n6      Emily Davis   40        83 kg     Deadlift                 132\n7   Jessica Wilson   25       120 kg  Bench Press                 178\n8  Michael Johnson   55        93 kg        Squat                 265\n9      Chris Brown   20        66 kg  Bench Press                 239","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Lifter Name</th>\n      <th>Age</th>\n      <th>Weight Class</th>\n      <th>Lift Type</th>\n      <th>Amount Lifted (kg)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Jessica Wilson</td>\n      <td>46</td>\n      <td>59 kg</td>\n      <td>Bench Press</td>\n      <td>269</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>John Doe</td>\n      <td>60</td>\n      <td>83 kg</td>\n      <td>Bench Press</td>\n      <td>179</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Emily Davis</td>\n      <td>41</td>\n      <td>105 kg</td>\n      <td>Bench Press</td>\n      <td>235</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Emily Davis</td>\n      <td>33</td>\n      <td>66 kg</td>\n      <td>Squat</td>\n      <td>359</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Laura Taylor</td>\n      <td>56</td>\n      <td>74 kg</td>\n      <td>Deadlift</td>\n      <td>221</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Sarah Thomas</td>\n      <td>56</td>\n      <td>74 kg</td>\n      <td>Squat</td>\n      <td>264</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Emily Davis</td>\n      <td>40</td>\n      <td>83 kg</td>\n      <td>Deadlift</td>\n      <td>132</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Jessica Wilson</td>\n      <td>25</td>\n      <td>120 kg</td>\n      <td>Bench Press</td>\n      <td>178</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Michael Johnson</td>\n      <td>55</td>\n      <td>93 kg</td>\n      <td>Squat</td>\n      <td>265</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Chris Brown</td>\n      <td>20</td>\n      <td>66 kg</td>\n      <td>Bench Press</td>\n      <td>239</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data_set.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-06T04:42:23.331353Z","iopub.execute_input":"2024-09-06T04:42:23.331886Z","iopub.status.idle":"2024-09-06T04:42:23.346311Z","shell.execute_reply.started":"2024-09-06T04:42:23.331804Z","shell.execute_reply":"2024-09-06T04:42:23.344909Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"Lifter Name           0\nAge                   0\nWeight Class          0\nLift Type             0\nAmount Lifted (kg)    0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"x = data_set.iloc[:, [1, 2]]\ny = data_set.iloc[:, [2]]","metadata":{"execution":{"iopub.status.busy":"2024-09-06T04:51:06.095650Z","iopub.execute_input":"2024-09-06T04:51:06.096236Z","iopub.status.idle":"2024-09-06T04:51:06.104463Z","shell.execute_reply.started":"2024-09-06T04:51:06.096192Z","shell.execute_reply":"2024-09-06T04:51:06.103149Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"x","metadata":{"execution":{"iopub.status.busy":"2024-09-06T04:51:27.375251Z","iopub.execute_input":"2024-09-06T04:51:27.375821Z","iopub.status.idle":"2024-09-06T04:51:27.393326Z","shell.execute_reply.started":"2024-09-06T04:51:27.375771Z","shell.execute_reply":"2024-09-06T04:51:27.391908Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"    Age Weight Class\n0    46        59 kg\n1    60        83 kg\n2    41       105 kg\n3    33        66 kg\n4    56        74 kg\n5    56        74 kg\n6    40        83 kg\n7    25       120 kg\n8    55        93 kg\n9    20        66 kg\n10   31        52 kg\n11   38        52 kg\n12   64        74 kg\n13   47       120 kg\n14   50        74 kg\n15   37        59 kg\n16   62        74 kg\n17   62       105 kg\n18   40       120 kg\n19   40        83 kg\n20   62        66 kg\n21   55        52 kg\n22   52        66 kg\n23   56        59 kg\n24   39        52 kg\n25   46       105 kg\n26   52        74 kg\n27   19        74 kg\n28   63       105 kg\n29   64       105 kg\n30   35        93 kg\n31   52        74 kg\n32   61        83 kg\n33   31        52 kg\n34   35         Open\n35   49        52 kg\n36   39        59 kg\n37   52        83 kg\n38   63        52 kg\n39   19        83 kg\n40   23        83 kg\n41   56        66 kg\n42   49         Open\n43   46        66 kg\n44   56        59 kg\n45   22        93 kg\n46   55       120 kg\n47   25        93 kg\n48   21        83 kg\n49   39       105 kg\n50   39        93 kg\n51   44        74 kg\n52   20         Open\n53   46       120 kg\n54   50        52 kg\n55   55        93 kg\n56   51         Open\n57   53       105 kg\n58   50       105 kg","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Weight Class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>46</td>\n      <td>59 kg</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>60</td>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>41</td>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>33</td>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>56</td>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>56</td>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>40</td>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>25</td>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>55</td>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>20</td>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>31</td>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>38</td>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>64</td>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>47</td>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>50</td>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>37</td>\n      <td>59 kg</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>62</td>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>62</td>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>40</td>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>40</td>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>62</td>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>55</td>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>52</td>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>56</td>\n      <td>59 kg</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>39</td>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>46</td>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>52</td>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>19</td>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>63</td>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>64</td>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>35</td>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>52</td>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>61</td>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>31</td>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>35</td>\n      <td>Open</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>49</td>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>39</td>\n      <td>59 kg</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>52</td>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>63</td>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>19</td>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>23</td>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>56</td>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>49</td>\n      <td>Open</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>46</td>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>56</td>\n      <td>59 kg</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>22</td>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>55</td>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>25</td>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>21</td>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>39</td>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>39</td>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>44</td>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>20</td>\n      <td>Open</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>46</td>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>50</td>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>55</th>\n      <td>55</td>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>56</th>\n      <td>51</td>\n      <td>Open</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>53</td>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>58</th>\n      <td>50</td>\n      <td>105 kg</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"y","metadata":{"execution":{"iopub.status.busy":"2024-09-06T04:51:41.350818Z","iopub.execute_input":"2024-09-06T04:51:41.351300Z","iopub.status.idle":"2024-09-06T04:51:41.366464Z","shell.execute_reply.started":"2024-09-06T04:51:41.351253Z","shell.execute_reply":"2024-09-06T04:51:41.365204Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"   Weight Class\n0         59 kg\n1         83 kg\n2        105 kg\n3         66 kg\n4         74 kg\n5         74 kg\n6         83 kg\n7        120 kg\n8         93 kg\n9         66 kg\n10        52 kg\n11        52 kg\n12        74 kg\n13       120 kg\n14        74 kg\n15        59 kg\n16        74 kg\n17       105 kg\n18       120 kg\n19        83 kg\n20        66 kg\n21        52 kg\n22        66 kg\n23        59 kg\n24        52 kg\n25       105 kg\n26        74 kg\n27        74 kg\n28       105 kg\n29       105 kg\n30        93 kg\n31        74 kg\n32        83 kg\n33        52 kg\n34         Open\n35        52 kg\n36        59 kg\n37        83 kg\n38        52 kg\n39        83 kg\n40        83 kg\n41        66 kg\n42         Open\n43        66 kg\n44        59 kg\n45        93 kg\n46       120 kg\n47        93 kg\n48        83 kg\n49       105 kg\n50        93 kg\n51        74 kg\n52         Open\n53       120 kg\n54        52 kg\n55        93 kg\n56         Open\n57       105 kg\n58       105 kg","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Weight Class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>59 kg</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>59 kg</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>59 kg</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>Open</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>59 kg</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>Open</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>59 kg</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>Open</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>55</th>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>56</th>\n      <td>Open</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>58</th>\n      <td>105 kg</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=0)\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-09-06T04:51:58.575037Z","iopub.execute_input":"2024-09-06T04:51:58.575512Z","iopub.status.idle":"2024-09-06T04:51:59.313491Z","shell.execute_reply.started":"2024-09-06T04:51:58.575466Z","shell.execute_reply":"2024-09-06T04:51:59.311819Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"(44, 2) (15, 2) (44, 1) (15, 1)\n","output_type":"stream"}]},{"cell_type":"code","source":"X_train","metadata":{"execution":{"iopub.status.busy":"2024-09-06T04:52:14.413631Z","iopub.execute_input":"2024-09-06T04:52:14.414327Z","iopub.status.idle":"2024-09-06T04:52:14.431499Z","shell.execute_reply.started":"2024-09-06T04:52:14.414278Z","shell.execute_reply":"2024-09-06T04:52:14.429930Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"    Age Weight Class\n42   49         Open\n48   21        83 kg\n7    25       120 kg\n14   50        74 kg\n32   61        83 kg\n49   39       105 kg\n29   64       105 kg\n37   52        83 kg\n56   51         Open\n18   40       120 kg\n55   55        93 kg\n27   19        74 kg\n15   37        59 kg\n5    56        74 kg\n31   52        74 kg\n16   62        74 kg\n50   39        93 kg\n20   62        66 kg\n51   44        74 kg\n8    55        93 kg\n13   47       120 kg\n25   46       105 kg\n17   62       105 kg\n58   50       105 kg\n57   53       105 kg\n52   20         Open\n38   63        52 kg\n1    60        83 kg\n12   64        74 kg\n45   22        93 kg\n24   39        52 kg\n6    40        83 kg\n23   56        59 kg\n36   39        59 kg\n21   55        52 kg\n19   40        83 kg\n9    20        66 kg\n39   19        83 kg\n54   50        52 kg\n3    33        66 kg\n0    46        59 kg\n53   46       120 kg\n47   25        93 kg\n44   56        59 kg","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Weight Class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>42</th>\n      <td>49</td>\n      <td>Open</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>21</td>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>25</td>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>50</td>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>61</td>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>39</td>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>64</td>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>52</td>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>56</th>\n      <td>51</td>\n      <td>Open</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>40</td>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>55</th>\n      <td>55</td>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>19</td>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>37</td>\n      <td>59 kg</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>56</td>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>52</td>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>62</td>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>39</td>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>62</td>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>44</td>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>55</td>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>47</td>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>46</td>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>62</td>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>58</th>\n      <td>50</td>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>53</td>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>20</td>\n      <td>Open</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>63</td>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>60</td>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>64</td>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>22</td>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>39</td>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>40</td>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>56</td>\n      <td>59 kg</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>39</td>\n      <td>59 kg</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>55</td>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>40</td>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>20</td>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>19</td>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>50</td>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>33</td>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>46</td>\n      <td>59 kg</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>46</td>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>25</td>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>56</td>\n      <td>59 kg</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X_test","metadata":{"execution":{"iopub.status.busy":"2024-09-06T04:52:29.177107Z","iopub.execute_input":"2024-09-06T04:52:29.177558Z","iopub.status.idle":"2024-09-06T04:52:29.190375Z","shell.execute_reply.started":"2024-09-06T04:52:29.177516Z","shell.execute_reply":"2024-09-06T04:52:29.189130Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"    Age Weight Class\n26   52        74 kg\n35   49        52 kg\n43   46        66 kg\n28   63       105 kg\n11   38        52 kg\n2    41       105 kg\n34   35         Open\n46   55       120 kg\n40   23        83 kg\n22   52        66 kg\n4    56        74 kg\n10   31        52 kg\n30   35        93 kg\n41   56        66 kg\n33   31        52 kg","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Weight Class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>26</th>\n      <td>52</td>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>49</td>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>46</td>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>63</td>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>38</td>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>41</td>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>35</td>\n      <td>Open</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>55</td>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>23</td>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>52</td>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>56</td>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>31</td>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>35</td>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>56</td>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>31</td>\n      <td>52 kg</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"y_train","metadata":{"execution":{"iopub.status.busy":"2024-09-06T04:52:44.893911Z","iopub.execute_input":"2024-09-06T04:52:44.894361Z","iopub.status.idle":"2024-09-06T04:52:44.909043Z","shell.execute_reply.started":"2024-09-06T04:52:44.894321Z","shell.execute_reply":"2024-09-06T04:52:44.907541Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"   Weight Class\n42         Open\n48        83 kg\n7        120 kg\n14        74 kg\n32        83 kg\n49       105 kg\n29       105 kg\n37        83 kg\n56         Open\n18       120 kg\n55        93 kg\n27        74 kg\n15        59 kg\n5         74 kg\n31        74 kg\n16        74 kg\n50        93 kg\n20        66 kg\n51        74 kg\n8         93 kg\n13       120 kg\n25       105 kg\n17       105 kg\n58       105 kg\n57       105 kg\n52         Open\n38        52 kg\n1         83 kg\n12        74 kg\n45        93 kg\n24        52 kg\n6         83 kg\n23        59 kg\n36        59 kg\n21        52 kg\n19        83 kg\n9         66 kg\n39        83 kg\n54        52 kg\n3         66 kg\n0         59 kg\n53       120 kg\n47        93 kg\n44        59 kg","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Weight Class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>42</th>\n      <td>Open</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>56</th>\n      <td>Open</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>55</th>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>59 kg</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>58</th>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>Open</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>59 kg</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>59 kg</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>59 kg</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>59 kg</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"y_test","metadata":{"execution":{"iopub.status.busy":"2024-09-06T04:52:52.270381Z","iopub.execute_input":"2024-09-06T04:52:52.270887Z","iopub.status.idle":"2024-09-06T04:52:52.283731Z","shell.execute_reply.started":"2024-09-06T04:52:52.270803Z","shell.execute_reply":"2024-09-06T04:52:52.282292Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"   Weight Class\n26        74 kg\n35        52 kg\n43        66 kg\n28       105 kg\n11        52 kg\n2        105 kg\n34         Open\n46       120 kg\n40        83 kg\n22        66 kg\n4         74 kg\n10        52 kg\n30        93 kg\n41        66 kg\n33        52 kg","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Weight Class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>26</th>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>105 kg</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>Open</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>120 kg</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>83 kg</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>74 kg</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>52 kg</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>93 kg</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>66 kg</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>52 kg</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_iris\n\n# Load dataset and split it into features and target variable\ndata = load_iris()\nX = data.data\ny = data.target\n\n# Split the dataset into training and testing sets\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","metadata":{"execution":{"iopub.status.busy":"2024-09-06T04:53:10.792420Z","iopub.execute_input":"2024-09-06T04:53:10.792970Z","iopub.status.idle":"2024-09-06T04:53:10.946704Z","shell.execute_reply.started":"2024-09-06T04:53:10.792923Z","shell.execute_reply":"2024-09-06T04:53:10.945492Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,  \n                           intercept_scaling=1, l1_ratio=None, max_iter=100,  \n                           multi_class='auto', n_jobs=None, penalty='l2',  \n                           random_state=0, solver='lbfgs', tol=0.0001, verbose=0,  \n                           warm_start=False)  ","metadata":{"execution":{"iopub.status.busy":"2024-09-06T04:54:41.310390Z","iopub.execute_input":"2024-09-06T04:54:41.310855Z","iopub.status.idle":"2024-09-06T04:54:41.430000Z","shell.execute_reply.started":"2024-09-06T04:54:41.310811Z","shell.execute_reply":"2024-09-06T04:54:41.428655Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_iris\n\n# Load dataset and split it into features and target variable\ndata = load_iris()\nX = data.data\ny = data.target\n\n# Split the dataset into training and testing sets\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Create and fit the model\nclassifier = LogisticRegression(random_state=0)\nclassifier.fit(x_train, y_train)\n\n# Predict the test set results\ny_pred = classifier.predict(x_test)\n\n# Optional: Print predictions to verify\nprint(y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-09-06T04:55:01.495599Z","iopub.execute_input":"2024-09-06T04:55:01.496929Z","iopub.status.idle":"2024-09-06T04:55:01.554487Z","shell.execute_reply.started":"2024-09-06T04:55:01.496866Z","shell.execute_reply":"2024-09-06T04:55:01.553095Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0]\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"}]},{"cell_type":"code","source":"y_pred","metadata":{"execution":{"iopub.status.busy":"2024-09-06T04:55:26.254300Z","iopub.execute_input":"2024-09-06T04:55:26.254857Z","iopub.status.idle":"2024-09-06T04:55:26.264117Z","shell.execute_reply.started":"2024-09-06T04:55:26.254810Z","shell.execute_reply":"2024-09-06T04:55:26.262868Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"array([2, 1, 0, 2, 0, 2, 0, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 2, 1,\n       0, 0, 2, 0, 0, 1, 1, 0])"},"metadata":{}}]},{"cell_type":"code","source":"#Creating the Confusion matrix  \nfrom sklearn.metrics import confusion_matrix  \ncm= confusion_matrix(y_test , y_pred)  \nprint(\"confusion Matrix\")\nprint(cm)","metadata":{"execution":{"iopub.status.busy":"2024-09-06T04:55:31.255472Z","iopub.execute_input":"2024-09-06T04:55:31.255989Z","iopub.status.idle":"2024-09-06T04:55:31.266312Z","shell.execute_reply.started":"2024-09-06T04:55:31.255940Z","shell.execute_reply":"2024-09-06T04:55:31.264893Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"confusion Matrix\n[[11  0  0]\n [ 0 13  0]\n [ 0  0  6]]\n","output_type":"stream"}]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\n\n# Assuming y_test and y_pred are already defined\ncm = confusion_matrix(y_test, y_pred)\n\n# Plot heatmap\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', \n            xticklabels=['Weight Class'], \n            yticklabels=['Amount Lifted (kg)'])\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title('Confusion Matrix Heatmap')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-06T04:55:46.198061Z","iopub.execute_input":"2024-09-06T04:55:46.199145Z","iopub.status.idle":"2024-09-06T04:55:46.977086Z","shell.execute_reply.started":"2024-09-06T04:55:46.199092Z","shell.execute_reply":"2024-09-06T04:55:46.975756Z"},"trusted":true},"execution_count":22,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import classification_report\n\n# Assuming y_test and y_pred are already defined\nreport = classification_report(y_test, y_pred, output_dict=True)\n\n# Print metrics for each class\nfor label, metrics in report.items():\n    if label != 'accuracy':  # Skip accuracy\n        print(f\"Class: {label}\")\n        print(f\"  Precision: {metrics['precision']:.2f}\")\n        print(f\"  Recall: {metrics['recall']:.2f}\")\n        print(f\"  F1-Score: {metrics['f1-score']:.2f}\")\n        print(f\"  Support: {metrics['support']}\")\n        print()","metadata":{"execution":{"iopub.status.busy":"2024-09-06T04:56:04.177231Z","iopub.execute_input":"2024-09-06T04:56:04.177928Z","iopub.status.idle":"2024-09-06T04:56:04.199447Z","shell.execute_reply.started":"2024-09-06T04:56:04.177866Z","shell.execute_reply":"2024-09-06T04:56:04.198055Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"Class: 0\n  Precision: 1.00\n  Recall: 1.00\n  F1-Score: 1.00\n  Support: 11\n\nClass: 1\n  Precision: 1.00\n  Recall: 1.00\n  F1-Score: 1.00\n  Support: 13\n\nClass: 2\n  Precision: 1.00\n  Recall: 1.00\n  F1-Score: 1.00\n  Support: 6\n\nClass: macro avg\n  Precision: 1.00\n  Recall: 1.00\n  F1-Score: 1.00\n  Support: 30\n\nClass: weighted avg\n  Precision: 1.00\n  Recall: 1.00\n  F1-Score: 1.00\n  Support: 30\n\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\n\n# Generate a synthetic dataset\nX, y = make_classification(n_samples=100, n_features=2, n_informative=2, n_redundant=0, n_clusters_per_class=1, random_state=42)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Train logistic regression model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Plot decision boundary\ndef plot_decision_boundary(X, y, model):\n    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01),\n                         np.arange(y_min, y_max, 0.01))\n    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])\n    Z = Z.reshape(xx.shape)\n    plt.contourf(xx, yy, Z, alpha=0.8)\n    plt.scatter(X[:, 0], X[:, 1], c=y, edgecolors='k', s=100)\n    plt.xlabel('Feature 1')\n    plt.ylabel('Feature 2')\n    plt.title('Logistic Regression Decision Boundary')\n    plt.show()\n\nplot_decision_boundary(X_test, y_test, model)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-06T05:01:29.439631Z","iopub.execute_input":"2024-09-06T05:01:29.440233Z","iopub.status.idle":"2024-09-06T05:01:29.798051Z","shell.execute_reply.started":"2024-09-06T05:01:29.440187Z","shell.execute_reply":"2024-09-06T05:01:29.796729Z"},"trusted":true},"execution_count":26,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\n\n# List of different regularization strengths\nC_values = [0.01, 0.1, 1, 10, 100]\naccuracies = []\n\n# Loop through different values of C\nfor C in C_values:\n    model = LogisticRegression(C=C)\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    accuracies.append(accuracy_score(y_test, y_pred))\n\n# Plot accuracy vs. C\nplt.plot(C_values, accuracies, marker='o')\nplt.xscale('log')\nplt.xlabel('Regularization Strength (C)')\nplt.ylabel('Accuracy')\nplt.title('Accuracy vs. Regularization Strength (C)')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-06T05:01:47.077102Z","iopub.execute_input":"2024-09-06T05:01:47.077547Z","iopub.status.idle":"2024-09-06T05:01:47.827308Z","shell.execute_reply.started":"2024-09-06T05:01:47.077506Z","shell.execute_reply":"2024-09-06T05:01:47.825749Z"},"trusted":true},"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\n# Predict using the test set\ny_pred = model.predict(X_test)\n\n# Compute confusion matrix\ncm = confusion_matrix(y_test, y_pred)\n\n# Plot the confusion matrix using seaborn\nplt.figure(figsize=(6,4))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title('Confusion Matrix')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-06T05:01:59.939214Z","iopub.execute_input":"2024-09-06T05:01:59.939760Z","iopub.status.idle":"2024-09-06T05:02:00.161914Z","shell.execute_reply.started":"2024-09-06T05:01:59.939710Z","shell.execute_reply":"2024-09-06T05:02:00.160355Z"},"trusted":true},"execution_count":28,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 600x400 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}